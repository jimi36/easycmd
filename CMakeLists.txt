CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

# Specifies compiler on linux
IF(UNIX)
	SET(CMAKE_C_COMPILER gcc)
	SET(CMAKE_CXX_COMPILER g++)
ENDIF()

PROJECT(test)

# Specifies root dir
SET(ROOT_DIR ${PROJECT_SOURCE_DIR})

# Option build type debug or release (default Debug)
OPTION(BUILD_DEBUG "Option build type debug or release" ON)
# Specifies build type
IF(BUILD_DEBUG)
	SET(CMAKE_BUILD_TYPE Debug)
ELSE()
	SET(CMAKE_BUILD_TYPE Release)
ENDIF()
SET(CMAKE_CONFIGURATION_TYPES ${CMAKE_BUILD_TYPE} CACHE STRING "" FORCE)

# Specifies include path
INCLUDE_DIRECTORIES(${ROOT_DIR}/../)

# Specifies compile flags
IF(WIN32)
	IF(BUILD_DEBUG)
		SET(CMAKE_CXX_FLAGS_DEBUG "/W3 /ZI /Od /MDd")
	ELSE()
		SET(CMAKE_CXX_FLAGS_RELEASE "/W3 /O2 /MD")
	ENDIF()
ELSEIF(UNIX)
	IF (BUILD_DEBUG)
		SET(CMAKE_CXX_FLAGS "-std=c++11 -g -O0 -Wall")
	ELSE()
		SET(CMAKE_CXX_FLAGS "-std=c++11 -O2 -Wall")
	ENDIF()
ENDIF()

# Remove unsafe warning
IF(WIN32)
	ADD_DEFINITIONS("-D_CRT_SECURE_NO_WARNINGS")
ENDIF()

FILE(GLOB TEST_SOURCES  ${ROOT_DIR}/test/*.cpp)
FILE(GLOB EASYCMD_SOURCES ${ROOT_DIR}/*.cpp ${ROOT_DIR}/*.h)

IF(WIN32)
	FOREACH(FILE_NAME ${EASYCMD_SOURCES})
		SOURCE_GROUP("easycmd" FILES ${FILE_NAME})
		#MESSAGE(STATUS "file: ${FILE_NAME} path: ${REL_FILE_PATH}")
	ENDFOREACH()
	FOREACH(FILE_NAME ${TEST_SOURCES})
		SOURCE_GROUP("" FILES ${FILE_NAME})
		#MESSAGE(STATUS "file: ${FILE_NAME} path: ${REL_FILE_PATH}")
	ENDFOREACH()
ENDIF()

ADD_EXECUTABLE(test ${TEST_SOURCES} ${EASYCMD_SOURCES})
#TARGET_LINK_LIBRARIES(test)
